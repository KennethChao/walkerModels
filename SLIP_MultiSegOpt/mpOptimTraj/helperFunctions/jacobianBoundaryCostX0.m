function jacobianStance0 = jacobianBoundaryCostX0(l0,theta0,l0d,theta0d,lEnd,thetaEnd,lEndd,thetaEndd,g,k,beta)
%JACOBIANBOUNDARYCOSTX0
%    JACOBIANSTANCE0 = JACOBIANBOUNDARYCOSTX0(L0,THETA0,L0D,THETA0D,LEND,THETAEND,LENDD,THETAENDD,G,K,BETA)

%    This function was generated by the Symbolic Math Toolbox version 8.0.
%    10-Sep-2018 16:12:28

t2 = sin(theta0);
t3 = cos(theta0);
t4 = l0d.*t3;
t5 = cos(thetaEnd);
t6 = sin(thetaEnd);
t7 = lEnd.*t6.*thetaEndd;
t9 = lEndd.*t5;
t10 = l0.*t2.*theta0d;
t8 = t4+t7-t9-t10;
t11 = l0d.*t2;
t12 = l0.*t3.*theta0d;
t13 = lEndd.^2;
t14 = t6.^2;
t15 = t13.*t14;
t16 = sin(beta);
t17 = g.*t16.*2.0;
t18 = lEnd.^2;
t19 = thetaEndd.^2;
t20 = t5.^2;
t21 = t18.*t19.*t20;
t22 = lEnd.*lEndd.*t5.*t6.*thetaEndd.*2.0;
t27 = g.*lEnd.*t6.*2.0;
t23 = t15+t17+t21+t22-t27;
t24 = sqrt(t23);
t25 = conj(t24);
t26 = t11+t12-t25;
jacobianStance0 = reshape([t2.*t8.*theta0d.*-2.0,t3.*t26.*theta0d.*2.0,t8.*(t11+t12).*-2.0,t26.*(t4-t10).*2.0,t3.*t8.*2.0,t2.*t26.*2.0,l0.*t2.*t8.*-2.0,l0.*t3.*t26.*2.0,0.0,0.0,0.0,0.0],[2,6]);
